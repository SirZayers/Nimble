syntax = "proto3";

package endorser_proto;

service EndorserCall {
  // Protocol Endpoints
  rpc GetPublicKey(GetPublicKeyReq) returns (GetPublicKeyResp);
  rpc InitializeState(InitializeStateReq) returns (InitializeStateResp);
  rpc FinalizeState(FinalizeStateReq) returns (FinalizeStateResp);
  rpc ReadState(ReadStateReq) returns (ReadStateResp);
  rpc NewLedger(NewLedgerReq) returns (NewLedgerResp);
  rpc ReadLatest(ReadLatestReq) returns (ReadLatestResp);
  rpc Append(AppendReq) returns (AppendResp);
  rpc Activate(ActivateReq) returns (ActivateResp);
  rpc Ping(PingReq) returns (PingResp);
}

message GetPublicKeyReq {}

message GetPublicKeyResp { bytes pk = 1; }

message NewLedgerReq {
  bytes handle = 1;
  bytes block_hash = 2;
  bytes block = 3;
}

message NewLedgerResp { bytes receipt = 1; }

message ReadLatestReq {
  bytes handle = 1;
  bytes nonce = 2;
}

message ReadLatestResp {
  bytes receipt = 1;
  bytes block = 2;
  bytes nonces = 3;
}

message AppendReq {
  bytes handle = 1;
  bytes block_hash = 2;
  uint64 expected_height = 3;
  bytes block = 4;
  bytes nonces = 5;
}

message AppendResp { bytes receipt = 1; }

message LedgerTailMapEntry {
  bytes handle = 1;
  uint64 height = 2;
  bytes metablock = 3;
  bytes block = 4;
  bytes nonces = 5;
}

message LedgerTailMap { repeated LedgerTailMapEntry entries = 1; }

// protobuf supports maps
// (https://developers.google.com/protocol-buffers/docs/proto#maps), but it does
// not allow using bytes as keys in the map gRPC messages are limited to 4 MB,
// which allows about 50+K entries. In the future, we can either increase the
// limit on gRPC messages or switch to gRPC streaming
message InitializeStateReq {
  bytes group_identity = 1;
  repeated LedgerTailMapEntry ledger_tail_map = 2; // the list of ledger tails
  bytes view_tail_metablock = 3; // the view ledger tail's metablock
  bytes block_hash = 4; // the block hash of the latest block on the view ledger
  uint64 expected_height = 5; // the conditional updated height of the latest
                              // block on the view ledger
}

message InitializeStateResp { bytes receipt = 1; }

message FinalizeStateReq {
  bytes block_hash = 1;
  uint64 expected_height = 2;
}

message FinalizeStateResp {
  bytes receipt = 1;
  repeated LedgerTailMapEntry ledger_tail_map = 2; // the list of ledger tails
}

enum EndorserMode {
  Uninitialized = 0;
  Initialized = 1;
  Active = 2;
  Finalized = 3;
}

message ReadStateReq {}

message ReadStateResp {
  bytes receipt = 1;
  EndorserMode mode = 2;
  repeated LedgerTailMapEntry ledger_tail_map = 3; // the list of ledger tails
}

message LedgerChunkEntry {
  bytes handle = 1;
  bytes hash = 2;
  uint64 height = 3;
  repeated bytes block_hashes = 4;
}

message ActivateReq {
  bytes old_config = 1;
  bytes new_config = 2;
  repeated LedgerTailMap ledger_tail_maps = 3;
  repeated LedgerChunkEntry ledger_chunks = 4;
  bytes receipts = 5;
}

message ActivateResp {}

message PingReq { bytes nonce = 1; }

message PingResp { bytes id_sig = 1; }
