syntax = "proto3";

package coordinator_proto;

service Call {
  rpc NewLedger(NewLedgerReq) returns (NewLedgerResp);
  rpc Append(AppendReq) returns (AppendResp);
  rpc ReadLatest(ReadLatestReq) returns (ReadLatestResp);
  rpc ReadByIndex(ReadByIndexReq) returns (ReadByIndexResp);
  rpc ReadViewByIndex(ReadViewByIndexReq) returns (ReadViewByIndexResp);
  rpc ReadViewTail(ReadViewTailReq) returns (ReadViewTailResp);
  rpc PingAllEndorsers(PingAllReq) returns (PingAllResp);
  rpc GetTimeoutMap(GetTimeoutMapReq) returns (GetTimeoutMapResp);

}

message NewLedgerReq {
  bytes handle = 1;
  bytes block = 2;
}

message NewLedgerResp {
  bytes receipts = 1;
}

message AppendReq {
  bytes handle = 1;
  bytes block = 2;
  uint64 expected_height = 3; // 0 means unconditional
}

message AppendResp {
  bytes hash_nonces = 1;
  bytes receipts = 2;
}

message ReadLatestReq {
  bytes handle = 1;
  bytes nonce = 2;
}

message ReadLatestResp {
  bytes block = 1;
  bytes nonces = 2;
  bytes receipts = 3;
}

message ReadByIndexReq {
  bytes handle = 1;
  uint64 index = 2;
}

message ReadByIndexResp {
  bytes block = 1;
  bytes nonces = 2;
  bytes receipts = 3;
}

message ReadViewByIndexReq {
  uint64 index = 1;
}

message ReadViewByIndexResp {
  bytes block = 1;
  bytes receipts = 2;
}

message ReadViewTailReq {
}

message ReadViewTailResp {
  bytes block = 1;
  bytes receipts = 2;
  uint64 height = 3;
  bytes attestations = 4; // TODO: place holder for attestation reports
}

message PingAllReq { 
  bytes nonce = 1; 
}

message PingAllResp { 
  bytes id_sig = 1; 
}

message GetTimeoutMapReq {
  bytes nonce = 1;
}

message GetTimeoutMapResp {
  bytes signature = 1;
  map<string, uint64> timeout_map = 2;
}